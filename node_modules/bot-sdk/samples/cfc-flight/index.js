const Bot = require('bot-sdk');
const privateKey = require("./rsaKeys.js").privateKey;
const request = require('request');

let CODE;

class InquiryBot extends Bot {
    constructor(postData) {
        super(postData);

        this.addLaunchHandler(() => {
            this.waitAnswer();
            return {
                outputSpeech: '欢迎使用机票查询服务，告诉我出发时间、离开城市、到达城市就可以查询最低的机票价格，比如：明天北京到上海的机票'
            };
        });

        this.addIntentHandler('flightQuery', () => {
            if (!this.request.isDialogStateCompleted() && !this.isSupportDisplay()) {
                return this.nlu.setDelegate(); 
            }

            let date = this.getSlot('date');
            let departure = this.getSlot('departure');
            let destination = this.getSlot('destination');

            if(this.isSupportDisplay()) {
                if (!date) {
                    this.nlu.ask("date");
                    return this.getResult("请问什么时间出发呢？"); 
                }else if(!departure) {
                    this.nlu.ask("departure");
                    return this.getResult("请问你的出发城市是哪里？"); 
                }else if(!destination) {
                    this.nlu.ask("destination");
                    return this.getResult("请问到达城市是哪里呢？"); 
                }
            }

            departure = JSON.parse(departure).city;
            destination = JSON.parse(destination).city;

            return new Promise((resolve, reject) => {
                this.getFlight(date, departure, destination)
                .then((ret) => {
                    console.log(ret);
                    /**
                     *{
                     *  "flightNo": "MU5292",
                     *  "airline": "MU",
                     *  "airname": "东方航空",
                     *  "dDate": "2018-09-25",
                     *  "dweek": "周二",
                     *  "price": 1240,
                     *  "discount": 0,
                     *  "flag": 0,
                     *  "ntprice": 1240,
                     *  "ntflag": 0
                     *}
                     **/

                    ret.departure = departure;
                    ret.destination = destination;

                    let result = '{dDate}从{departure}飞往{destination}的最低机票价格为{price}元，航班号为:{airname}{flightNo}';
                    result = result.replace(/\{(\w+)\}/g, function(){
                        return ret[arguments[1]];
                    });

                    resolve(this.getResult(result));
                });
            });
        });
    }

    getFlight(date, departure, destination){
        let url  = 'http://sec-m.ctrip.com/restapi/soa2/13516/lowPriceCalendar';

        return new Promise((resolve, reject) => {
            Promise.all([
                this.getCityCode(departure), 
                this.getCityCode(destination)
            ]).then(function(codes){
               let body = {head:{},stype:1,dcty:codes[0],acty:codes[1],start:"",end:date,flag:1};
               
               console.log(body);
               let options = {
                    headers: { 
                        "Content-Type": "application/json"
                    },
                    url: url,
                    body: JSON.stringify(body),
                    method: 'POST'
                };

                request(options, function(error, res, data){
                    if (error) {
                        reject(error);
                    }

                    data= JSON.parse(data);
                    let targe;
                    for(let i = 0, len = data.prices.length; i < len; i++) {
                        if(data.prices[i].dDate == date) {
                            targe = data.prices[i];
                            break; 
                        }
                    }

                    if(targe){
                        resolve(targe);
                    }
                    reject();
                });
            });
        });
    }

    getCityCode(city) {
        let url = 'http://dbp-nlu.gz.bcebos.com/airport.txt?authorization=bce-auth-v1%2Ff8691eb9f642440ca5bce93bf35f5d4a%2F2018-06-29T14%3A07%3A50Z%2F-1%2Fhost%2F6b66b12354608a14b76a4b4a897cd2734e4ef6e67a7f788750f561f699790900'; 

        return new Promise(function(resolve, reject){
            if(CODE) {
                resolve(CODE[city].code); 
            }else{
                request(url, function(error, res, data){
                    if (error) {
                        reject(error);
                    }

                    data = JSON.parse(data);

                    let ret = {};
                    data.cities.forEach((item)=>{
                        ret[item.name] = item;
                    }); 
            
                    CODE = ret;         
                    resolve(CODE[city].code); 
                });
            }
        });
    }

    // 获取返回结果
    getResult(text, title = "", reprompt = "") {
        reprompt = reprompt || text;
        let ret = {
            outputSpeech: text,
            reprompt: reprompt
        };

        if(this.isSupportDisplay()) {
            let bodyTemplate = new Bot.Directive.Display.Template.BodyTemplate1();
            if(title) {
                bodyTemplate.setTitle(title);
            }
            bodyTemplate.setPlainTextContent(text);
            bodyTemplate.setBackGroundImage('http://img.taopic.com/uploads/allimg/120801/214828-120P10Z43585.jpg');
            let renderTemplate = new Bot.Directive.Display.RenderTemplate(bodyTemplate);
            
            ret.directives = [renderTemplate];
        }

        return ret;
    }

    // 判断是否支持Display指令
    // 小度在家支持Display指令渲染template
    isSupportDisplay(){
        let data = this.request.getData();
        if(data.context && data.context.System && data.context.System.device) {
            let device = data.context.System.device;
            return device.supportedInterfaces.Display !== undefined;
        }
        return false;
    }
}

exports.handler = function(event, context, callback) {
    try {
        let b = new InquiryBot(event);
        // 0: debug  1: online
        b.botMonitor.setEnvironmentInfo(privateKey, 0);
        b.run().then(function(result) {
            callback(null, result);
        }).catch(callback);
    } catch (e) {
        callback(e);
    }
}
